{
  "name": "Moose",
  "tagline": "Mission Object Oriented Scripting Environment (MOOSE) for lua mission scripting design in DCS World",
  "body": "# Context\r\n\r\nA development has been ongoing for a while now, which allows to create missions quickly using an Object Oriented Framework developed in lua.\r\nMOOSE is currently still in alpha version, but will evolve over time. Right now, it has been updated to work with DCS world 1.5.\r\n\r\nMOOSE is a **M**ission **O**bject **O**riented **S**cripting **E**nvironment, and is meant for mission designers and mission hosters. It allows to quickly setup complex missions using pre-scripted scenarios using the available classes within the framework.\r\n\r\nYou can find the source of MOOSE here on GITHUB. It is free for download: \r\nhttps://github.com/FlightControl-Master/MOOSE/\r\n\r\n# Goals\r\n\r\nThe goal of MOOSE is to allow mission designers to enhance their scripting with mission orchestration objects, which can be instantiated from defined classes within the framework. This will allow to write mission scripts with minimal code embedded. Of course, the richness of the framework will determine the richness of the misson scenarios. We can expect that MOOSE will evolve over time, as more missions will be designed within the framework.\r\n\r\n# MOOSE LUA Classes\r\n\r\nThe following classes are currently embedded within MOOSE and can be included within your mission scripts:\r\n\r\n* [BASE](Documentation/Base.html): The main class from which all MOOSE classes are derived from. The BASE class contains essential functions to support inheritance and MOOSE object execution tracing (logging within the DCS.log file in the saved games folder of the user).\r\n\r\n* [DATABASE](Documentation/Database.html): Create sets of units (and groups) upon defined filter criteria. These sets can be used to iterate the DATABASE calling a defined function for each unit (or group).\r\n\r\n* [SPAWN](Documentation/Spawn.html): Spawn new groups (and units) during mission execution.\r\n\r\n* [ESCORT](Documentation/Escort.html): Makes groups consisting of helicopters, airplanes, ground troops or ships within a mission joining your flight. You can control these groups through the ratio menu during your flight. Available commands are around: Navigation, Position Hold, Reporting (Target Detection), Attacking, Assisted Attacks, ROE, Evasion, Mission Execution and more ...\r\n\r\n# MOOSE Tutorials and Examples\r\n\r\nYou can download [test missions](https://github.com/FlightControl-Master/MOOSE/tree/master/Test%20Missions) to have examples and learn the syntax and usage of the MOOSE classes.\r\n\r\nThere are [Video Tutorials](https://www.youtube.com/channel/UCjrA9j5LQoWsG4SpS8i79Qg) on my YOUTUBE channel on which you can learn some coding aspects with mission execution demos, as well as some of the tooling and internal mechanisms within MOOSE.\r\n\r\n\r\n# MOOSE Inclusion and Usage\r\n\r\nMOOSE can be embedded within a Mission in two modes:\r\n\r\n1. Dynamic loading (this is preferred when you are developing a mission):\r\n\r\n* You need to install MOOSE in your DCS World installation folder: <drive>:\\Program Files\\Eagle Dynamics\\DCS World\\Scripts**\\Moose**\r\n\r\n* This directory needs to contain the lua files embedded in the Moose directory within the [MOOSE package](https://github.com/FlightControl-Mas...e/master/Moose)\r\n\r\n* In order to load MOOSE dynamically in your mission, you need to execute a trigger containing a DO SCRIPT FILE of the [Moose_Load_Dynamic.lua](https://github.com/FlightControl-Master/MOOSE/blob/master/Loaders/Moose_Load_Dynamic.lua) file. This file is also included in the MOOSE package in the \"Loaders\" directory.\r\n\r\n2. Embedded loading (once your mission is finsihed to be published):\r\n* No MOOSE installation is required by those people flying or using your mission, as MOOSE is loaded as a whole embedded within the mission.\r\n* In order to embed MOOSE within your mission, you need to execute a trigger containing a DO SCRIPT FILE of the [Moose_Load_Embedded.lua](https://github.com/FlightControl-Master/MOOSE/blob/master/Loaders/Moose_Load_Embedded.lua) file. This file is also included in the MOOSE package in the \"Loaders\" directory.\r\n\r\n3. To orchestrate all this, there is a MOOSE mission template created, that you can use to create your first mission.\r\nIn the triggers section, there is a flag (9999) that will decide how MOOSE will be loaded. When flag 9999 is set, MOOSE will be dynamically loaded. When flag 9999 is off, MOOSE will be loaded embedded. Note that when loaded embedded, **your mission must include the last Moose_Embedded.lua file**. So, ensure that the last file is included in the DO SCRIPT section when MOOSE got an update! \r\n\r\n# Credits\r\n\r\nNote that the framework is based on code i've written myself, but some of it is also based on code that i've seen as great scripting code and ideas, and which i've revised. I see this framework evolving towards a broader public, and the ownership may dissapear (or parts of it). Consider this code public domain. Therefore a list of credits to all who have or are contributing (this list will increase over time):\r\n\r\n1. Grimes & others:\r\nYou'll notice that within this framework, there are functions used from mist. I've taken the liberty to copy those atomic mist functions that are very nice and useful, and copied those withini a separate file. It is not the intention to replace mist at all, it is just, the MOOSE framework approaches some of the same goals that mist has with a different technique, and therefore i've rewritten parts of mist using Object Oriented techniques. So, all credits to Grimes on mist. I've been debugging a lot of code within mist myself when i was using the script. Find the mist threat here:\r\nhttp://forums.eagle.ru/showthread.php?t=98616\r\n\r\n2. Prof_hilactic & others:\r\nSEAD Defenses. I've taken the script, and reworded it to fit within MOOSE. The script within MOOSE is hardly recognizable anymore from the original. Find here the posts: http://forums.eagle.ru/showpost.php?...59&postcount=1\r\n\r\n3. xcom\r\nHis contribution is related to the eStatHandler. I've analyzed and studied his scripts, and reworked it a bit to use it also within the framework (I've also tweaked it a bit). Find his post here: http://forums.eagle.ru/showpost.php?...73&postcount=1\r\n\r\n4. The rest of the framework functions and class definitions were my own developments. Trust i've spent hours and hours investigating, trying and writing and documenting code building this framework.\r\n\r\nNote that there is a vast amount of other scripts out there. I may contact you personally to ask for your contribution / permission if i can use your idea or script to tweak it to the framework. Parts of these scripts will have to be redesigned to fit it into an OO framework.\r\n\r\nHope you think the idea is great and useful.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}